//
// Created by zlz on 22-4-26.
//
#include <iostream>
#include <vector>

class TokenTableWrapper{
    int row=0,col=0;
    int token_cnt=0;
    int start_state=0;

    std::vector<std::vector<int>> states;
    std::vector<int> tokens;
public:
    void read(){

        std::cin>>row>>col>>token_cnt>>start_state;

        if(row!=token_cnt || row<=0 || col<=0 || start_state<0 || start_state>=row){
            throw std::logic_error("input token data error!");
        }

        for(int i=0;i<row;i++){
            states.emplace_back();
            for(int j=0;j<col;j++){
                int tmp;
                std::cin>>tmp;

                states.back().push_back(tmp);
            }
        }

        for(int i=0;i<token_cnt;i++){
            int tmp;
            std::cin>>tmp;

            tokens.push_back(tmp);
        }
    }


    void print(const char* class_name) {
        std::cout<<"// auto generated by TokenTableWrapper"<<std::endl;
        std::cout<<"#include \""<<class_name<<".h\""<<std::endl;
        std::cout<<"#include <vector>"<<std::endl;
        std::cout<<"using std::vector;"<<std::endl;
        std::cout<<"TokenTable "<<class_name<<"::getTokenTable(){"<<std::endl;
        std::cout<<"\tstatic std::vector<vector<int>> states={"<<std::endl;
        for(int i=0;i<row;i++){
            std::cout<<"\t\t{";
            for(int j=0;j<col;j++){
                std::cout<<states[i][j]<<",";
            }
            std::cout<<"},"<<std::endl;
        }
        std::cout<<"\t};"<<std::endl;
        std::cout<<"\tstatic std::vector<int> tokens={";

        for(int i=0;i<token_cnt;i++){
            std::cout<<tokens[i]<<",";
        }
        std::cout<<"};"<<std::endl;

        std::cout<<"\treturn TokenTable(states,tokens,"<<start_state<<");"<<std::endl;
        std::cout<<"}"<<std::endl;
    }
};


int main(int argc,char *argv[]){
    if(argc==2){
        TokenTableWrapper wrapper;
        wrapper.read();
        wrapper.print(argv[1]);
    } else{
        std::cout<<"wrong argument"<<std::endl;
    }
}

